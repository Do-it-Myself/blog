{"version":3,"file":"static/js/477.a99bbe05.chunk.js","mappings":"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","sources":["pages/posts/Barcode_Scanner_with_Computer_Vision/Page.js","pages/main/posttemp/PostTemp.js","pages/main/posttemp/H1.js","pages/main/posttemp/H2.js","pages/main/posttemp/Href.js","pages/main/posttemp/Img.js","pages/main/posttemp/P.js","pages/main/posttemp/OL.js","pages/main/posttemp/UL.js","pages/main/posttemp/Table.js","pages/main/posttemp/Youtube.js","pages/posts/Hangman_with_Python/Page.js","pages/posts/KwickLine_Queue_Barrier/Page.js","pages/posts/Light_Sensor_Firmware/Page.js","pages/posts/OpenFitness/Page.js","pages/posts/PCB_Keyboard_and_Mouse/Page.js","pages/posts/Robotic_Infinity_Gauntlet/Page.js","pages|sync|/^/posts.*$","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import React from \"react\";\r\n\r\nimport { PostTemp, P, H1, H2, Href, OL, UL, Img, Youtube } from \"../Element\";\r\n\r\nexport default function Page(props) {\r\n  return (\r\n    <PostTemp {...props}>\r\n      <P>\r\n        This is the first time I’ve tried any computer vision project.\r\n        Originally I wrote the code for a Raspberry Pi Hackathon but I amended\r\n        it such that it can run with a computer web camera.\r\n      </P>\r\n      <P>\r\n        My Python program used Pyzbar library to decode barcode images and\r\n        extract information, then OpenCV to add rectangles surrounding the\r\n        identified barcode. In the command line, the program would print out the\r\n        decoded content and the barcode type.\r\n      </P>\r\n      <P>\r\n        I’ve added some special features to the scanner. While QR codes have\r\n        green rectangles, other barcodes have red rectangles. The program also\r\n        records the previously scanned code content, so that it won’t repeatedly\r\n        print out the decoded content. The best feature is the link detection\r\n        function (using Validators and Webbrowser library) – if the decoded\r\n        content is a URL, the program will open the link on a web browser if the\r\n        user agrees.\r\n      </P>\r\n      <H1>Demonstration video</H1>\r\n      <P>\r\n        Here’s a video showing the program. QR codes could be read more stably\r\n        because they have eyes and alignment patterns, such that the library\r\n        could identify the codes more easily.\r\n      </P>{\" \"}\r\n      <Youtube id=\"3nix_U5lI7w\" />\r\n      <H1>File</H1>\r\n      <Href>https://github.com/Do-it-myself/Barcode-Scanner-with-Computer-Vision</Href>\r\n    </PostTemp>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\n\r\nimport ListItem from \"../ListItem\";\r\nlet postJSON = require(\"../../posts/Posts.json\");\r\n\r\n\r\nexport default function PostTemp({ content, homeIsNarrow, next, children }) {\r\n  const isSmall = useMediaQuery({ query: \"(max-width: 550px)\" });\r\n\r\n  return (\r\n    <div className={homeIsNarrow ? \"posttempNarrow\" : \"posttempWide\"}>\r\n      <div className=\"postflex\">\r\n        <div className=\"postbox\">\r\n          <div className=\"posttitle\">{content[\"title\"]}</div>\r\n          <div className=\"postsummary\">{content[\"summary\"]}</div>\r\n          <div className=\"postdate\">{content[\"date\"]}</div>\r\n          <div className=\"imageflex\">\r\n            <img\r\n              src={require(\"../../posts\" + content[\"dir\"] + \"/main.jpg\")}\r\n              alt=\"main\"\r\n              className=\"image\"\r\n            />\r\n          </div>\r\n          <div className=\"children\">{children} </div>\r\n        </div>\r\n        <div className=\"readmore\">Read more</div>\r\n        <div className={isSmall ? \"postSmall\" : \"\"}>\r\n        <ListItem key={postJSON[next[0]][\"id\"]} content={postJSON[next[0]]} />\r\n        <ListItem key={postJSON[next[1]][\"id\"]} content={postJSON[next[1]]} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function H1({ children }) {\r\n  return (\r\n    <div className=\"h1\">{children}</div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function H2({ children }) {\r\n  return (\r\n    <div className=\"h2\">{children}</div>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Href({ children, embed }) {\r\n  if (embed) {\r\n    return (\r\n        <a href={embed} target=\"_blank\" rel=\"noopener noreferrer\" className=\"hrefembed\">\r\n          {children}\r\n        </a>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"href\">\r\n      <a href={children} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        {children}\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Img({ content, image, width }) {\r\n  if (!width) {\r\n    width =\"var(--imageWidth)\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"imgElementFlex\">\r\n      <img\r\n        src={require(\"../../posts\" + content[\"dir\"] + \"/pictures/\" + image)}\r\n        alt=\"blog\"\r\n        style={{width: width}}\r\n      />\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\n\r\nexport default function P({ children }) {\r\n  return (\r\n    <div className=\"p\">{children}</div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function OL({ children }) {\r\n  return (\r\n    <ol className=\"ol\">{children}</ol>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function UL({ children }) {\r\n  return (\r\n    <ul className=\"ul\">{children}</ul>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Table({ children, style, border }) {\r\n  return (\r\n    <div className=\"tableFlex\">\r\n      <table className={border? \"tableBorder\" : \"table\"} style={style}>{children}</table>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Youtube({ id }) {\r\n  const postWidth = Math.min(window.innerWidth * 0.95, 720);\r\n  const padding = 40;\r\n  const imageWidth = Math.round(Math.min(postWidth - padding * 2, 500));\r\n  const imageHeight = Math.round((imageWidth * 9) / 16);\r\n    \r\n  return (\r\n    <div className=\"youtubeElementFlex\">\r\n      <iframe\r\n        allowFullScreen=\"1\"\r\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n        title=\"OpenFitness - Efficient Filter\"\r\n        width={imageWidth.toString()}\r\n        height={imageHeight.toString()}\r\n        src={\"https://www.youtube.com/embed/\" + id + \"?autoplay=0\"}\r\n        id=\"widget4\"\r\n        className=\"youtubeElement\"\r\n      ></iframe>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nimport { PostTemp, P, H1, H2, Href, OL, UL, Img, Youtube } from \"../Element\";\r\n\r\nexport default function Page(props) {\r\n  return (\r\n    <PostTemp {...props}>\r\n      <P>\r\n        This is my first game written with Python script, which I guess\r\n        everyone’s familiar with. The player simply has to type their guessed\r\n        letter (whether it is capitalized or not) into the dialog box. After\r\n        that, the terminal will show whether the guess is correct, and update\r\n        the status of the “hanged man”.\r\n      </P>\r\n      <P>\r\n        I added programs to identify invalid inputs from the players. When the\r\n        player types multiple letters, symbols, or repeated letters, the program\r\n        can identify and state that they are invalid.\r\n      </P>\r\n      <H1>Demonstration video</H1>\r\n      <P>Here’s a video showing the program.</P>\r\n      <Youtube id=\"EFR6lqPrKVo\"/>\r\n      <H1>File</H1>\r\n      <Href>https://github.com/Do-it-myself/Hangman-with-Python</Href>\r\n    </PostTemp>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport {\r\n  PostTemp,\r\n  P,\r\n  H1,\r\n  H2,\r\n  Href,\r\n  OL,\r\n  UL,\r\n  Img,\r\n  Youtube,\r\n  Table,\r\n} from \"../Element\";\r\n\r\nexport default function Page(props) {\r\n  return (\r\n    <PostTemp {...props}>\r\n      <P>\r\n        KwickScreen, a UK-based company designing hospital isolation screens,\r\n        mainly uses glass-fiber bistable tubes (C-tubes) to make their screens\r\n        retractable. They’ve sponsored a design tournament, with a design prompt\r\n        asking contestants to use C-tubes to enter new markets. My teammates and\r\n        I chose this design prompt and eventually spent three weeks refining\r\n        existing queue barriers.\r\n      </P>\r\n      <H1>Background</H1>\r\n      <P>\r\n        Queue barrier systems are used for maintaining efficient pedestrian flow\r\n        and implementing social distancing. The system is widely used in malls,\r\n        hotels, airports, hospitals etc. Currently, the commonly existing types\r\n        are as follows.\r\n      </P>\r\n      <Table style={{ fontSize: \"15px\" }}>\r\n        <tr>\r\n          <th>\r\n            <Img {...props} image=\"Retractable_belt_barrier.PNG\" width=\"100%\" />\r\n          </th>\r\n          <th>\r\n            <Img {...props} image=\"Post_and_rope_barrier.PNG\" width=\"100%\" />\r\n          </th>\r\n          <th>\r\n            <Img {...props} image=\"Cafe_barrier.PNG\" width=\"100%\" />\r\n          </th>\r\n        </tr>\r\n        <tr>\r\n          <th>Retractable belt</th>\r\n          <th>Post & rope</th>\r\n          <th>Cafe</th>\r\n        </tr>\r\n      </Table>\r\n      <P>\r\n        Our team discovered that C-tube is a good fit to queue barrier systems\r\n        due to its unique properties:\r\n      </P>\r\n      <UL>\r\n        <li>Retractable and rigid</li>\r\n        <li>Remains in place when extended</li>\r\n      </UL>\r\n      <Img {...props} image=\"C-tube.jpeg\" />\r\n      <P>Harnessing C-tube’s properties, we designed KwickLine.</P>\r\n      <H1>What is KwickLine?</H1>\r\n      <P>\r\n        KwickLine is a queue barrier system with a retractable screen as the\r\n        barrier. While the wide screen makes queue-jumping harder, the banner\r\n        inside the screen can easily be customized.\r\n      </P>\r\n      <Table>\r\n        <tr>\r\n          <th>\r\n            <Img {...props} image=\"No_queue_jump.PNG\" width=\"100%\" />\r\n          </th>\r\n          <th>\r\n            <Img {...props} image=\"Customizable.PNG\" width=\"100%\" />\r\n          </th>\r\n        </tr>\r\n        <tr>\r\n          <th>✗ Queue-jumping</th>\r\n          <th>✓ Customizable</th>\r\n        </tr>\r\n      </Table>\r\n      <P>\r\n        Each screen pulled from a column can be connected to another column in\r\n        different positions. The screen direction is then adjustable to form\r\n        different barrier systems.\r\n      </P>\r\n      <Img {...props} image=\"Using_KwickLine.PNG\" />\r\n      <Img {...props} image=\"Lock.gif\" width=\"calc(var(--imageWidth)/2)\" />\r\n      <H1>Design Overview</H1>\r\n      <P>\r\n        The following shows the CAD render model and our prototype, which is\r\n        made with mainly PVC tubes, cardboard and plastic films, and of course\r\n        the C-tubes.\r\n      </P>\r\n\r\n      <Img {...props} image=\"CAD_render.PNG\" />\r\n\r\n      <Img {...props} image=\"Prototype.jpeg\" />\r\n      <H1>Design Features</H1>\r\n      <H2>Variable-length</H2>\r\n      <P>\r\n        The width of the screen is adjustable, while normal queue barriers with\r\n        advertisements have fixed length only. Our design then allows banners of\r\n        different aspect ratios to be inserted.\r\n      </P>\r\n      <Img {...props} image=\"Variable_length.gif\" />\r\n      <H2>Easy banner replacement</H2>\r\n      <P>\r\n        The plastic screen, which is held in place by magnetic tape, can be\r\n        opened easily to replace the banner. A flap on top prevents water from\r\n        entering, especially on rainy days. KwickLine is then suitable for both\r\n        outdoor and indoor applications.\r\n      </P>\r\n      <Table>\r\n        <tr>\r\n          <th>\r\n            <Img\r\n              {...props}\r\n              image=\"Easy_banner_replacement_sketch.PNG\"\r\n              width=\"calc(var(--imageWidth)*0.6)\"\r\n            />\r\n          </th>\r\n          <th>\r\n            <div style={{ width: \"calc(var(--imageWidth)*0.1)\" }}></div>\r\n          </th>\r\n          <th>\r\n            <Img\r\n              {...props}\r\n              image=\"Easy_banner_replacement.gif\"\r\n              width=\"calc(var(--imageWidth)*0.3)\"\r\n            />\r\n          </th>\r\n        </tr>\r\n      </Table>\r\n      <H2>Easy connection</H2>\r\n      <P>\r\n        The screen is connected to another column sturdily with a lock. The\r\n        prototype used a ‘snap-on’ magnetic mechanism on solely the upper part,\r\n        but mechanical locks can be incorporated into both the upper and lower\r\n        C-tubes to strengthen the barrier. Each screen is supported by two\r\n        columns, hence the system itself is stable. With different locking\r\n        positions available, different screen configurations could be made.\r\n      </P>\r\n      <Table>\r\n        <tr>\r\n          <th>\r\n            <Img\r\n              {...props}\r\n              image=\"Easy_connection.PNG\"\r\n              width=\"calc(var(--imageWidth)*0.55)\"\r\n            />\r\n          </th>\r\n          <th>\r\n            <div style={{ width: \"calc(var(--imageWidth)*0.1)\" }}></div>\r\n          </th>\r\n          <th>\r\n            <Img\r\n              {...props}\r\n              image=\"Easy_connection.gif\"\r\n              width=\"calc(var(--imageWidth)*0.35)\"\r\n            />\r\n          </th>\r\n        </tr>\r\n      </Table>\r\n      <H1>Design Challenges</H1>\r\n      <H2>Stability</H2>\r\n      <P>\r\n        Force on the barrier, for instance, strong winds, could make the screen\r\n        topple. To solve this, the columns will have a heavy base, as well as a\r\n        strong connection.\r\n      </P>\r\n      <Img {...props} image=\"Stability.PNG\" />\r\n      <H2>Aesthetic</H2>\r\n      <P>\r\n        Another concern is the general appearance of KwickLine. What if the\r\n        client just wants a generic barrier and doesn’t know what to put on the\r\n        screen? What if Kwickline is unrolled halfway?\r\n      </P>\r\n      <Img {...props} image=\"Aesthetic_problem.PNG\" />\r\n      <P>\r\n        The solution to this is to provide a few generic patterns for the user\r\n        that come along with the product. Even when unrolled halfway, these\r\n        patterns look decent.\r\n      </P>\r\n      <Table>\r\n        <tr>\r\n          <th>\r\n            <Img\r\n              {...props}\r\n              image=\"Aesthetic_solution.PNG\"\r\n              width=\"calc(var(--imageWidth)*0.6)\"\r\n            />\r\n          </th>\r\n          <th>\r\n            <div style={{ width: \"calc(var(--imageWidth)*0.1)\" }}></div>\r\n          </th>\r\n          <th>\r\n            <Img\r\n              {...props}\r\n              image=\"Aesthetic_halfway.PNG\"\r\n              width=\"calc(var(--imageWidth)*0.3)\"\r\n            />\r\n          </th>\r\n        </tr>\r\n      </Table>\r\n      <H1>Design Details</H1>\r\n      <H2>Rough Dimensions</H2>\r\n      <P>\r\n        The height of the queue barrier’s column is similar to those available\r\n        in the market. The screen’s height and width are designed such that it\r\n        can fit up to two A0 horizontal banners. The dimension unit is in mm.\r\n      </P>\r\n      <Img {...props} image=\"Rough_Dimensions.PNG\" />\r\n      <H2>Column</H2>\r\n      <P>\r\n        To provide manufacturing ease, the column is split into four components\r\n        – the upper ‘snail-like’ cover, bottom base, outer casing, and the axis\r\n        for pulling the screen out.\r\n      </P>\r\n      <Youtube id=\"rw0J1VeaK1s\" />\r\n      <P>\r\n        After manufacturing the individual components, they can be fit together\r\n        by simple locking mechanisms. The upper cover is connected to the outer\r\n        casing by a friction lock, while the lower base is connected to the\r\n        casing by a rotation lock.\r\n      </P>\r\n      <Youtube id=\"nMKNMJC8Dnc\" />\r\n      <Youtube id=\"_NheTLha2Vg\" />\r\n      <H1>Market Research</H1>\r\n      <P>\r\n        In the UK, there are about 2500 museums, 1230 hospitals, 550 malls, and\r\n        40 airports respectively, with all these places adopting queue barrier\r\n        systems. Meanwhile, there is also the market size for putting printed\r\n        ads, which is one major function of KwickLine. The current market size\r\n        is 61.67B USD, with a compound annual growth rate of 8.3%. From all\r\n        these statistics, we can see there will be a demand for KwickLine.\r\n      </P>\r\n      <P>\r\n        Compared to our common counterparts, KwickLine is better in terms of the\r\n        following benchmarks.\r\n      </P>\r\n      <Table style={{ fontSize: \"12px\" }} border={true}>\r\n        <tr>\r\n          <th width=\"20%\"></th>\r\n          <th width=\"20%\">KwickLine</th>\r\n          <th width=\"20%\">Retractable belt</th>\r\n          <th width=\"20%\">Post & rope</th>\r\n          <th width=\"20%\">Cafe</th>\r\n        </tr>\r\n        <tr>\r\n          <th style={{ textAlign: \"left\" }}>Customization</th>\r\n          <th>✓</th>\r\n          <th>✗</th>\r\n          <th>✗</th>\r\n          <th>✓</th>\r\n        </tr>\r\n        <tr>\r\n          <th style={{ textAlign: \"left\" }}>Variable length</th>\r\n          <th>✓</th>\r\n          <th>✓</th>\r\n          <th>✓</th>\r\n          <th>✗</th>\r\n        </tr>\r\n      </Table>\r\n      <P>\r\n        KwickLine does have better features, but why would users that already\r\n        have many queue barriers invest in KwickLine? It is because the\r\n        customization feature will appeal to customers who need to often replace\r\n        the screen content, as it is quite costly in terms of money and time to\r\n        replace content in traditional barriers.\r\n      </P>\r\n      <P>\r\n        Currently, queue barrier counterparts are usually sold for around\r\n        £150-250 for a banner with two columns. While we estimated the\r\n        production cost of one KwickLine unit to be roughly £60, the suggested\r\n        pricing system for KwickLine is therefore as below:\r\n      </P>\r\n      <Table style={{ fontSize: \"12px\" }} border={true}>\r\n        <tr>\r\n          <th width=\"10%\"></th>\r\n          <th width=\"30%\">{\"<\"} 5 units</th>\r\n          <th width=\"30%\">{\">\"} 5 units</th>\r\n          <th width=\"30%\">Rental</th>\r\n        </tr>\r\n        <tr>\r\n          <th style={{ textAlign: \"left\" }}>Price per unit</th>\r\n          <th>£169</th>\r\n          <th>£139</th>\r\n          <th>£15/day</th>\r\n        </tr>\r\n        <tr>\r\n          <th style={{ textAlign: \"left\" }}>Target customers</th>\r\n          <th>Smaller shops e.g. cafe (price matches other queue barriers) </th>\r\n          <th>Shopping malls, airports (for bulk purchase) </th>\r\n          <th>Large events e.g. exhibitions, concerts, trade shows</th>\r\n        </tr>\r\n      </Table>\r\n      <H1>Performance in Design Tournament</H1>\r\n      <P>\r\n        This design allows my team to be one of the stronger ones for the final\r\n        critiques. The score is especially good for ‘Market potential and\r\n        development’. However, there are some next-step suggestions provided:\r\n      </P>\r\n      <UL>\r\n        <li>\r\n          Can people lining up in the line see the content on the screen? How to\r\n          widen the audience of the screen content?\r\n        </li>\r\n        <li>\r\n          Can the three-layer screens be rolled up easily? Is it possible to opt\r\n          for a one-layer design?\r\n        </li>\r\n      </UL>\r\n      <H1>File</H1>\r\n      <P>SolidWorks modeling:</P>\r\n      <Href>https://github.com/Do-it-myself/KwickLine-Queue-Barrier</Href>\r\n    </PostTemp>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { PostTemp, P, H1, H2, Href, OL, UL, Img, Youtube } from \"../Element\";\r\n\r\nexport default function Page(props) {\r\n  return (\r\n    <PostTemp {...props}>\r\n      <P>\r\n        This is the first time I attempt to write a firmware library. I used\r\n        STM32 Blue Pill Development Board, which has an ARM Cortex-M\r\n        microcontroller, hence MBed library could be used. I attempted to use\r\n        the library written to read light sensor (TSL2591) data and calculate\r\n        the lux of the environment.\r\n      </P>\r\n      <H1>Reference information</H1>\r\n      <P>\r\n        While TSL2591 has its own{\" \"}\r\n        <Href embed=\"https://cdn-shop.adafruit.com/datasheets/TSL25911_Datasheet_EN_v1.pdf\">\r\n          datasheet\r\n        </Href>\r\n        , Adafruit also has an{\" \"}\r\n        <Href embed=\"https://www.arduino.cc/reference/en/libraries/adafruit-tsl2591-library/\">\r\n          Arduino-specific library\r\n        </Href>\r\n        .\r\n      </P>\r\n      <H1>Overview</H1>\r\n      <P>\r\n        The light sensor has different registers storing information – from data\r\n        read from the sensor to data that controls the sensor setting. The\r\n        sensor uses the I2C protocol with a preset slave address. To read or\r\n        write data in the registers, I have to first write the ‘command bits’\r\n        (1010 0000) and the register address. Hence, a “write” function involves\r\n        2 writes, and a “read” function involves 1 read and 1 write.\r\n      </P>\r\n      <P>\r\n        The library consists of two files – a header file (.h) and an\r\n        implementation file (.cpp). The header file listed the variable and\r\n        method, and declared the class, while the implementation file actually\r\n        wrote the method content.\r\n      </P>\r\n      <H1>Coding</H1>\r\n      <P>\r\n        The header file is the easier one. With the Adafruit Arduino library, I\r\n        could easily borrow the instance definition from it. For the methods,\r\n        there are existing functions (e.g. interrupts) that I need not use,\r\n        hence I selected methods useful to keep for my class.\r\n      </P>\r\n      <P>\r\n        I categorized the methods into four groups – basic functions,\r\n        configurations, setting data, and lighting data. The basic functions are\r\n        the one for reading and writing data, as well as enabling and disabling\r\n        the sensor. I didn’t realize I got to enable certain bits before the\r\n        sensor could collect data, which wasted much extra time on debugging.\r\n      </P>\r\n      <P>\r\n        Despite not fully understanding the scientific principle behind the\r\n        sensor, I deduced that I have to set proper gain and timing to allow\r\n        nice measurement. Hence, two methods are made specifically for setting\r\n        them.\r\n      </P>\r\n      <P>\r\n        To ensure the I2C communication works, I made the “begin” function. It\r\n        attempts to check the ID of the sensor, and compared it with its known\r\n        value. If it’s the same, it means the I2C communication is established.\r\n        There are also two functions to check the set gain and timing value\r\n        stored in the sensor, which is for calculating lux.\r\n      </P>\r\n      <P>\r\n        The highlight is to collect light data and calculate lux. The data is\r\n        read in the “getFullLuminosity” methods, and the lux is calculated with\r\n        a formula in the Adafruit library.\r\n      </P>\r\n      <H1>Debugging</H1>\r\n      <P>\r\n        I used a logic analyzer to check the signal sent between the master\r\n        (Blue Pill) and the slave (sensor) for debugging. The file (Debug.dsl)\r\n        measured the voltage level when it was reading data from the light\r\n        sensor.\r\n      </P>\r\n      <Img {...props} image=\"Debug.jpg\" />\r\n      <H1>Serial</H1>\r\n      <P>\r\n        I made a program to send gain, timing, and 5 lux measurement serially.\r\n        Unlike Arduino, STM32 requires a serial-to-USB adaptor to send serial\r\n        data to the COM port. The measurement setup is as follows:\r\n      </P>\r\n      <Img {...props} image=\"Serial.jpg\" />\r\n      <P>\r\n        The demonstration video is as follows.{\" \"}\r\n        <Href embed=\"https://docs.microsoft.com/en-us/windows/win32/sensorsapi/understanding-and-interpreting-lux-values\">\r\n          Microsoft has a webpage about interpreting lux value\r\n        </Href>{\" \"}\r\n        – the value before covering matches that of ‘bright indoor’, and that\r\n        after covering matches that of ‘dark indoor’, verifying the accuracy of\r\n        the data and the formula.\r\n      </P>\r\n      <Youtube id=\"uuNA8J59e7Y\" />\r\n      <H1>OLED</H1>\r\n      <P>\r\n        Afterwards, I decided to display the lux and gain on an OLED display.\r\n        Fortunately, while Adafruit provided a graphics library, davetcc forked\r\n        it and produced an MBed library for SH1106.\r\n      </P>\r\n      <P>I got into quite a lot of hiccups when configuring the library:</P>\r\n      <OL>\r\n        <li>\r\n          There are dependencies I have to download to support the library\r\n        </li>\r\n        <li>Rtos library has to be enabled in build_flags</li>\r\n      </OL>\r\n      <P>\r\n        Eventually, I managed to make the OLED display words. Then I code it\r\n        such that it could display the lux and gain information. If the sensor\r\n        has disconnected in the middle, it would find out and prompt users to\r\n        reset the microprocessor.\r\n      </P>\r\n      <P>The display setup is as follows:</P>\r\n      <Img {...props} image=\"OLED.jpg\" />\r\n      <P>And the demonstration video is as follows:</P>\r\n      <Youtube id=\"_2RWrVb3b3I\" />\r\n      <H1>Files</H1>\r\n      <Href>https://github.com/Do-it-myself/Light-Sensor-Firmware</Href>\r\n    </PostTemp>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { PostTemp, P, H1, H2, Href, Img, Youtube } from \"../Element\";\r\n\r\nexport default function Page(props) {\r\n  return (\r\n    <PostTemp {...props}>\r\n      <P>\r\n        I’ve recently joined a hackathon with the theme “Social\r\n        Entrepreneurship”. Under this, one of the sub-theme is “Healthier,\r\n        Longer, Better Lives”. My teammate and I chose this hacking prompt and\r\n        spent a month developing OpenFitness – a sports search filter with\r\n        gamification elements.\r\n      </P>\r\n      <H1>Problems</H1>\r\n      <P>\r\n        As students who want to stay active and maintain a balanced lifestyle,\r\n        we often find it incredibly difficult to do so without tools to help us\r\n        out.\r\n      </P>\r\n      <Img {...props} image=\"Problem_1.PNG\" />\r\n      <P>\r\n        For instance, I would like to stay active by enjoying different sports\r\n        with my friends. However, as university students, all of us have\r\n        incredibly packed timetables. None of us could afford the time to plough\r\n        through dozens of search results to find one that fits all of our needs.\r\n        In the end, we end up studying in our rooms rather than meeting up and\r\n        doing sports. It’s too time-consuming to search for sports venues.\r\n      </P>\r\n      <Img {...props} image=\"Problem_2.PNG\" />\r\n      <P>\r\n        As for my teammate, he has always wanted to improve his physique by\r\n        heading to the gym a few times each week. Working out is a long-term\r\n        commitment – it takes months of consistent workouts for results to show,\r\n        but as a university student, he’d prefer working on his coursework\r\n        assignments over working out because it feels like a more efficient use\r\n        of my time. It’s difficult for him to stay motivated and disciplined to\r\n        work out because the results take a long time to show.\r\n      </P>\r\n      <P>\r\n        In fact, based on the AIA Healthier Together Survey, it is more\r\n        important for one to stay physically active than staying mentally active\r\n        in order to feel engaged in life. Among the eight ingredients of a\r\n        healthier, longer, better life is being active and engaged. We can see\r\n        that sports play a significant role in ensuring one’s well-being.\r\n        However, another study states that over 50% of my hometown’s population\r\n        fails to meet the baseline physical activity level. We are simply not\r\n        doing enough sports for our well-being.\r\n      </P>\r\n      <P>\r\n        To address these issues, OpenFitness combines a search filter for sports\r\n        venues with gamification elements, with the goal of promoting an active\r\n        lifestyle among people. There are three main features that make the app\r\n        stand out from the competition.\r\n      </P>\r\n      <Img {...props} image=\"OpenFitness.jpg\" />\r\n      <H1>Features</H1>\r\n      <H2>Efficient - Filter</H2>\r\n      <P>\r\n        Our search filter makes it more efficient to look for sports venues that\r\n        fit the user’s criteria. For us, it’s never been more frustrating to\r\n        look for a sports venue that seems like a perfectly good fit, only to\r\n        find out that it won’t be open on the day you’re planning to go there,\r\n        or that it’s out of your budget. This process of searching, browsing,\r\n        and eliminating, can be extremely time-consuming and exhausting for the\r\n        user. Using our centralized sports-only search engine, OpenFitness\r\n        streamlines this process by allowing users to filter based on common\r\n        criteria like location, price, type of sports, and opening hours. It\r\n        then generates a list of matching results. Users can click on any of the\r\n        results for details, where information, photos, and reviews of the\r\n        sports venue are all organized on one page.\r\n      </P>\r\n      <Youtube id=\"WDIw7B_2k2A\" />\r\n      <H2>Engaging – Gamification</H2>\r\n      <P>\r\n        Our gamification elements promote user engagement in doing sports. When\r\n        the user arrives at a sports venue, our app uses GPS to determine which\r\n        sports venue the user is currently at. Either the app detects the\r\n        closest sports venue, or the user could manually choose the locations.\r\n        Users can collect points every time they finish a sports session. The\r\n        number of points is calculated based on the duration of the session.\r\n        Users can level up after they’ve reached a certain number of points.\r\n        We’ve also introduced personal fitness goals for the user. The weekly\r\n        fitness tasks serve as short-term goals, while the badges serve as\r\n        long-term goals. Users can check their progress on their statistics\r\n        page. On the other hand, our leaderboard system promotes competition\r\n        among the user’s social group. The combination of short-term and\r\n        long-term goals drives users’ motivation and promotes long-term\r\n        engagement.\r\n      </P>\r\n      <Youtube id=\"JI04AgdDbQk\" />\r\n      <H2>Personalized – Recommendation</H2>\r\n      <P>\r\n        Our app offers personalized recommendations on types of sports. Users’\r\n        scores are broken down into four categories. Our recommendations are\r\n        made based on scores in each category. If the user scores particularly\r\n        high on cardio, then our app predicts that they might prefer cardio\r\n        sports and recommends cardio to them. At the same time, if the user\r\n        scores particularly low on muscle strength, then our app may suggest\r\n        they try out activities that develop muscle strength. This dual\r\n        recommendation system provides the user with the option to either\r\n        develop their fitness “spike” (specialty) or go for balanced fitness\r\n        development.\r\n      </P>\r\n      <Youtube id=\"0XGpcGTuXxc\" />\r\n      <H1>Conclusion</H1>\r\n      <P>\r\n        Tying back to our personal experiences with doing sports, the\r\n        gamification features would serve as a source of motivation and\r\n        accountability for my teammate to workout consistently. In addition,\r\n        using the search filter function, it will take much less time for me to\r\n        find sports venues that suit all of my friends’ fitness levels and\r\n        interests. The personalized recommendations can also give us ideas for\r\n        what new sports to try out the next time I meet with my friends.\r\n      </P>\r\n      <P>\r\n        Eventually, whether it’s university students, full-time workers, or just\r\n        anybody who wants to try out sports but doesn’t know where to start, all\r\n        Hongkongers can look for sports venues more efficiently and enjoy an\r\n        active lifestyle.\r\n      </P>\r\n      <H1>Development</H1>\r\n      <P>\r\n        We believe that our app has the potential to expand to a larger scale.\r\n        In terms of managing the database of sports venues, we’ve got an\r\n        excellent success story to draw from, which is the restaurant guide app\r\n        OpenRice. Similarly, for our gamification elements, we’ve got successful\r\n        study apps like Forest and YPT, which rank friends based on the number\r\n        of hours they’ve spent on studying. However, as our app allows user to\r\n        manually input their sports locations, there might be concerns that\r\n        users may fake sports sessions in order to score points and rank higher\r\n        on the leaderboard. However, these study apps show that users will be\r\n        unlikely to do so as they know this ultimately can’t help them fulfill\r\n        their main goal – for study apps, it’s to get good grades, while for\r\n        OpenFitness, it’s to maintain a healthy lifestyle.\r\n      </P>\r\n      <Img {...props} image=\"Business_model.PNG\" />\r\n      <P>\r\n        Meanwhile, unlike Google Maps Reviews, since our app only focuses on\r\n        sports venues, we believe it’s much more feasible to maintain and\r\n        regulate the information provided by our search filter. Unlike Facebook\r\n        pages of sports venues, our app allows users to contribute directly to\r\n        the photos of the sports venues. Therefore, there will be both company\r\n        and user input to expand the database. In terms of user engagement, we\r\n        believe that the convenience provided by our app, in addition to the\r\n        bandwagon effect from our leaderboard ranking system, are strong pull\r\n        factors to use our app.\r\n      </P>\r\n      <Img {...props} image=\"Compare.PNG\" />\r\n      <P>\r\n        In the future, more data could be covered by the app, such as\r\n        facilities, latest trends, and trainers testimonials, so that users\r\n        could have more information in mind when choosing the right venue. The\r\n        app could even collaborate with sports centers to allow users to book\r\n        their facilities and classes through our platform.\r\n      </P>\r\n      <P>\r\n        The app can also possibly be transformed into a social media platform\r\n        for all things sports-related. Not only can users write about their\r\n        opinions on sports venues and sports tips on their blogs, but also share\r\n        their snapshots of trying out different sports activities. A virtual\r\n        community for sports enthusiasts can then be gradually developed.\r\n      </P>\r\n      <H1>Impact</H1>\r\n      <P>\r\n        In the long run, we envision our app improving Hong Kong’s development\r\n        sustainability. Economically, success stories from other search filter\r\n        managing and gamification companies show this app development is a\r\n        viable business model, and this app is simultaneously a way to promote\r\n        the sports industry. Socially, we hope our app could develop a sports\r\n        community in Hong Kong and promote an active culture among Hongkongers,\r\n        eventually encouraging more and more to adopt healthy lifestyles.\r\n      </P>\r\n      <H1>Technologies</H1>\r\n      <P>The following shows the technologies used for this project.</P>\r\n      <Img {...props} image=\"Technologies.PNG\" />\r\n      <H1>File</H1>\r\n      <P>React Native file:</P>\r\n      <Href>https://github.com/Do-it-myself/OpenFitness</Href>\r\n    </PostTemp>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { PostTemp, P, H1, H2, Href, OL, UL, Img, Youtube } from \"../Element\";\r\n\r\nexport default function Page(props) {\r\n  return (\r\n    <PostTemp {...props}>\r\n      <P>\r\n        Wishing to make a PCB from scratch, I decided to make a cool PCB\r\n        keyboard and mouse. This is the first individual hardware project I have\r\n        tried, and there are many hiccups that I have faced during the process.\r\n      </P>\r\n      <H1>Steps</H1>\r\n      <P>\r\n        I split the workflow into three main blocks – prototyping, PCB\r\n        production, and finalization as follows:\r\n      </P>\r\n      <H2>Prototyping</H2>\r\n      <OL>\r\n        <li>Test the hardware for the keyboard – microprocessors, buttons</li>\r\n        <li>Design the circuit for the keyboard</li>\r\n        <li>Code for four buttons and try it on a breadboard</li>\r\n        <li>Code for all buttons and try it on a breadboard</li>\r\n        <li>Add features (shift, symbols) and try it on a breadboard</li>\r\n        <li>Test the hardware for mouse – thumbstick</li>\r\n        <li>\r\n          Code for left/right click (buttons) and the cursor movement\r\n          (thumbstick) and try it on a breadboard\r\n        </li>\r\n        <li>\r\n          Combine both codes for keyboard and mouse and try it on a breadboard\r\n        </li>\r\n      </OL>\r\n      <H2>PCB production</H2>\r\n      <OL>\r\n        <li>Draw symbols for the microprocessor and the thumbstick</li>\r\n        <li>Draw footprints for the microprocessor, thumbstick, and buttons</li>\r\n        <li>Draw schematics for the PCB</li>\r\n        <li>Design the PCB layout</li>\r\n        <li>Create Gerber files and send the PCB to manufacturing</li>\r\n      </OL>\r\n      <H2>Finalization</H2>\r\n      <OL>\r\n        <li>Solder the component for final testing</li>\r\n      </OL>\r\n      <H1>Prototyping</H1>\r\n      <H2>Testing hardware</H2>\r\n      <P>\r\n        Initially, my more ambitious plan was to use ESP32 to make a wireless\r\n        keyboard. However, the ESP32 I bought was faulty and it couldn’t even\r\n        run digitalRead(PIN) properly (all it gives is just 0 despite I\r\n        literally connecting it to a VCC!). After hours of struggle, I switched\r\n        to a less-ambitious plan of using Arduino Pro Micro, which supports HID\r\n        protocol to emulate a keyboard and a mouse with {\"<Keyboard.h>\"} and{\" \"}\r\n        {\"<Mouse.h>\"} library. I bought soft tactile buttons from PiHut as\r\n        recommended by some bloggers making PCB keyboards. However only 1/3 of\r\n        them worked properly (the remaining 2/3 were not responding even when I\r\n        pressed hard), so I switched to normal plastic tactile buttons – though\r\n        less comfortable to click, none of them is faulty.\r\n      </P>\r\n      <H2>Designing circuit</H2>\r\n      <P>\r\n        The working principle of the keyboard is as follows. I allocated the\r\n        keys into column 0-4 and row 5-12 as below.\r\n      </P>\r\n      <Img {...props} image=\"Rows_and_columns.PNG\" />\r\n      <P>\r\n        The microprocessor will take turn to make each column HIGH in signal\r\n        with pin 0 – 4, and pin 5 – 12 will detect whether they receive a HIGH\r\n        signal. For instance, if button ‘Q’ is pressed, when it’s pin 0 turn to\r\n        be HIGH, pin 6 will detect a HIGH signal. A switch-case code is written\r\n        to map the column and row activated to the respective letter.\r\n      </P>\r\n      <H2>Code-debugging</H2>\r\n      <P>\r\n        The code works fine for the four-button case (Four_button.ino). However,\r\n        when I expanded the code to all buttons (All_buttons_old.ino), there\r\n        were two problems arose:\r\n      </P>\r\n      <OL>\r\n        <li>\r\n          The button will detect multiple pressing even when I only intend to\r\n          press the button once\r\n        </li>\r\n        <li>\r\n          The button might map to the wrong key – by trial and error, this only\r\n          happens to the first output but not the others\r\n        </li>\r\n      </OL>\r\n      <P>\r\n        Problem 1 arose clearly because the time taken for me to press and\r\n        unpress the button is too ‘long’ from the microprocessor perspective –\r\n        it thought I have continuously pressed the button. I haven’t fully\r\n        discovered the cause for problem 2, but I suspect it might be due to an\r\n        electrical propagation delay when I press the button in the middle of\r\n        the process of detecting a HIGH signal.\r\n      </P>\r\n      <P>\r\n        The solution to both is to add a variable counting the number of loops\r\n        the code has run during the process of pressing and unpressing the\r\n        button. The code will wait till the second count to output the keyboard,\r\n        and will no longer output anything. When the button is released, the\r\n        count will be reset to 0. (All_buttons_with_count.ino)\r\n      </P>\r\n      <H2>Adding features</H2>\r\n      <P>\r\n        I upgraded the code by adding the shift function first. When the shift\r\n        button is clicked, the red LED light will be on as an indication. A\r\n        variable is made to store the status of the shift button. I simply\r\n        implemented an if-else code to detect the status and give different\r\n        outputs.\r\n      </P>\r\n      <P>\r\n        The symbol function is activated by long-pressing the buttons. I\r\n        upgraded the function such that if the count reaches 500 (later reduced\r\n        to 50 when the mouse function is implemented), it will replace the\r\n        number/letter typed with the respective symbol instead.\r\n        (All_buttons_shift_symbols.ino)\r\n      </P>\r\n      <H2>Implementing mouse function</H2>\r\n      <P>\r\n        Two separate pins are used to detect the left and right click buttons\r\n        for the mouse respectively. For the cursor movement, it is detected by\r\n        the thumbstick. The thumbstick (from Adafruit) is essentially a\r\n        potentiometer. When untouched, the potential is divided in half – with\r\n        analogRead(PIN) at around 512. I mapped the analog signal range (0 –\r\n        1023) to 13 discrete values (-6 – 6) that control the extent of the\r\n        cursor movement in x and y directions. (Mouse.ino)\r\n      </P>\r\n      <H2>Combining keyboard and mouse</H2>\r\n      <P>\r\n        The final stage of the prototyping is to combine the keyboard and mouse\r\n        code. The following shows the breadboard setup and the prototype trial.\r\n        (Buttons_and_mouse.ino)\r\n      </P>\r\n      <Img {...props} image=\"Prototype.jpg\" />\r\n      <Youtube id=\"oI0pxV9rdF0\" />\r\n      <H1>PCB</H1>\r\n      <P>\r\n        After designing symbols and footprints of the components, I drew the PCB\r\n        circuit on the schematic as below:\r\n      </P>\r\n      <Img {...props} image=\"Schematic.PNG\" />\r\n      <P>\r\n        I then start to draw the exact PCB layout. After connecting the wires to\r\n        the corresponding pins, I started to add a silkscreen for the buttons\r\n        and some decorations.\r\n      </P>\r\n      <UL>\r\n        <li>Red: F. Cu</li>\r\n        <li>Blue: B. Cu</li>\r\n        <li>Grey: F. Silkscreen</li>\r\n        <li>Black: Edge Cut</li>\r\n      </UL>\r\n      <Img {...props} image=\"PCB_layout.PNG\" />\r\n      <P>At last, the front surface of the PCB’s 3D render is as follows:</P>\r\n      <Img {...props} image=\"3D_render.png\" />\r\n      <P>\r\n        Recommended by my friend, I sent the PCB to PCBway for manufacturing. A\r\n        few days later, I received the package from them and started my final\r\n        work.\r\n      </P>\r\n      <Img {...props} image=\"PCB.jpg\" />\r\n      <H1>Finalization</H1>\r\n      <P>\r\n        I soldered the female pin headers for the Arduino, the thumbstick, the\r\n        LED, and one button first for initial testing (just in case the PCB is\r\n        wrongly designed). After checking it works, I soldered the remaining\r\n        components and did my final test. (Buttons_and_mouse_micro.ino)\r\n      </P>\r\n      <Img {...props} image=\"Final.jpg\" />\r\n      <Youtube id=\"1_WU78MpiaA\" />\r\n      <H1>File</H1>\r\n      <P>Arduino and KiCAD file:</P>\r\n      <Href>https://github.com/Do-it-myself/PCB-Keyboard-and-Mouse</Href>\r\n    </PostTemp>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { PostTemp, P, H1, H2, Href, OL, UL, Img, Youtube } from \"../Element\";\r\n\r\nexport default function Page(props) {\r\n  return (\r\n    <PostTemp {...props}>\r\n      <P>\r\n        This is one of the most ambitious projects I have ever done, as well as\r\n        my first single-handed robot project – from mechanical CAD, prototyping,\r\n        programming to testing. My main goal is to try 3D printing and computer\r\n        vision libraries (OpenCV and Mediapipe). Initially, I wished to practice\r\n        using Raspberry Pi but then realized its hardware cannot support my\r\n        program. Eventually, I used my laptop for computation and used HC-05\r\n        (the only wireless chip readily available at home) to send serial data\r\n        to control my Arduino Uno.\r\n      </P>\r\n      <H1>Steps</H1>\r\n      <P>\r\n        I split the workflow into four main blocks – movement, computer vision,\r\n        serial connection, and finalization as follows:\r\n      </P>\r\n      <H2>Movement</H2>\r\n      <OL>\r\n        <li>CAD the robot hand’s general dimension</li>\r\n        <li>CAD all components</li>\r\n        <li>3D print all components</li>\r\n        <li>Color the gems and assemble all parts</li>\r\n        <li>Test finger movements</li>\r\n      </OL>\r\n      <H2>Computer Vision</H2>\r\n      <OL>\r\n        <li>\r\n          Write Python code (using OpenCV and mediapipe) to detect individual\r\n          finger’s movement\r\n        </li>\r\n      </OL>\r\n      <H2>Serial Connection</H2>\r\n      <OL>\r\n        <li>Test wired and wireless connection with LED</li>\r\n        <li>Connect strings with servo and test finger movement</li>\r\n      </OL>\r\n      <H1>Movement</H1>\r\n      <P>\r\n        My goal is to fit 5 servos into the arm. I subsequently designed the\r\n        rough size of the whole hand as follows:\r\n      </P>\r\n      <Img {...props} image=\"Rough_sketch.PNG\" />\r\n      <P>\r\n        Afterwards, I CAD all the components one by one. I split the components\r\n        into 5 categories – arm, base, fingers, hand, and servo.\r\n      </P>\r\n      <P>\r\n        Designing the servo bed is rather challenging, as I have to consider\r\n        both the servo position and holes for wires to go through. For the outer\r\n        shells, the patterns are easily made with the “wrap” function. The\r\n        electronic components are all placed in the base.\r\n      </P>\r\n      <P>The final Solidworks assembly is as follows:</P>\r\n      <Img {...props} image=\"Whole_Assembly.PNG\" />\r\n      <P>And the inner structure is as follows:</P>\r\n      <Img {...props} image=\"Whole_Assembly_Internal.PNG\" />\r\n      <P>\r\n        After converting files to STL and generating GCode using Ultimate Cura\r\n        Slicer, I printed the components with Ender 3 V2 3D printer using gold\r\n        and black PLA filament.\r\n      </P>\r\n      <P>\r\n        The course of the assembly made me discover a number of flaws made in\r\n        the design:\r\n      </P>\r\n      <UL>\r\n        <li>\r\n          The back instead of the front should be thickened, so that I could\r\n          stick the parts (e.g. hand lid) to the back instead of the front for\r\n          easier assembly\r\n        </li>\r\n        <li>\r\n          More space should be left between the walls of the finger joints, such\r\n          that I do not need to sand as much to smoothen finger motion\r\n        </li>\r\n        <li>\r\n          The hole size for M4 screws should be about 3mm instead of 2mm\r\n          (eventually I have to drill the holes to make them larger)\r\n        </li>\r\n        <li>\r\n          It’s better for some holes to be drilled after printing, since the\r\n          printing tolerance will make holes unaligned\r\n        </li>\r\n      </UL>\r\n      <P>\r\n        Upon assembling the fingers with the fishing string, I tried the test\r\n        their movements. The finger mechanism is inspired by InMoov’s design.\r\n        Each finger is controlled by 2 strings – one for extension, and one for\r\n        contraction, with the 1.75mm filament connecting the joints as follows:\r\n      </P>\r\n      <Img {...props} image=\"Finger_movement.gif\" />\r\n      <H1>Computer Vision</H1>\r\n      <P>\r\n        Mediapipe has a Python library analyzing hang gestures and labeling 21\r\n        landmarks of the fingers. By comparing the coordinates of the landmark,\r\n        I could determine whether the finger is “closed” or “opened”.\r\n      </P>\r\n      <P>\r\n        For the index, middle, ring, and little finger, if the fingertip\r\n        landmark is below that of the joint, then it’s closed, and vice versa.\r\n        Yet for the thumb, it’s different since the finger movement is sideways\r\n        instead of up-down. Hence, the program has to first identify whether the\r\n        hand detected is left or right (by comparing whether some landmarks on\r\n        the palm are on the left or the right of the others), then analyze the\r\n        thumb’s sideway motion with a similar principle.\r\n      </P>\r\n      <P>\r\n        The method above is simple but not perfect, since it wouldn’t work when\r\n        the hand is placed upside down or horizontal. Yet, there is no need to\r\n        detect these cases for my project, hence I simply let the program send\r\n        warnings to users who did not put their hands in proper positions.\r\n      </P>\r\n      <P>The flow of the program is as follows:</P>\r\n      <Img {...props} image=\"Flow_diagram_1.PNG\" />\r\n      <P>\r\n        The demonstration video with the code (Finger_counter_trial.py) is as\r\n        follows:\r\n      </P>\r\n      <Youtube id=\"SI_v4fDlT5I\" />\r\n      <H1>Raspberry Pi</H1>\r\n      <P>\r\n        At first, I wanted to directly use Raspberry Pi to run the whole robot –\r\n        Pi Camera to capture hand movement, RPi’s hardware for Mediapipe\r\n        analysis, and GPIO pins for servo control (Finger_counter_rpi_trial.py).\r\n        However, not only does the jiggling problem of servos gets severe with\r\n        RPi’s GPIO pins, but also the RPi is unable to run such an intense\r\n        computer vision program with its limited hardware – the whole device\r\n        just kept on shutting down!\r\n      </P>\r\n      <P>\r\n        Eventually, I gave up using RPi. Instead, while I used my computer for\r\n        computer vision analysis, I used an Arduino UNO for controlling the\r\n        servos’ movement. Nonetheless, I still kept some unfinished CAD files\r\n        for the design to hold my RPi inside the robot’s hand.\r\n      </P>\r\n      <H1>Serial Connection</H1>\r\n      <H2>Trial connection with LED</H2>\r\n      <P>\r\n        Pyserial allows computers to send serial data to devices through COM\r\n        ports. To test the library, I sent serial signals to Arduino for\r\n        controlling an LED to turn on and off. The computer side sends “on” and\r\n        “off” strings serially, and the microcontroller, after receiving the\r\n        correct string, will do the subsequent action.\r\n      </P>\r\n      <P>I first tried a wired version (“Wired” file):</P>\r\n      <Img {...props} image=\"Wired.jpg\" />\r\n      <P>Then the wireless version with Bluetooth (“Bluetooth” file):</P>{\" \"}\r\n      <Img {...props} image=\"Wireless.jpg\" />\r\n      <H2>Trial connection with servos</H2>\r\n      <P>\r\n        After ensuring the serial connection can send strings properly, I start\r\n        to test controlling servos to move. When supplying electricity for the\r\n        servos, I realize it is costly and electrically unstable to use 5 4×1.5V\r\n        AA battery boxes to support the servos. Trial and error made me realize\r\n        one USB to USB-C wire can support two servos. Eventually, I bought one\r\n        extra servo and use 3 wires to support 6 servos (one left idle).\r\n      </P>\r\n      <P>\r\n        As for the wireless control, I firstly test by directly sending strings\r\n        of 1 & 0 serially to the servos and it works well, yet when I try to\r\n        send strings via reading hand gesture, the program wasn’t as smooth as\r\n        expected.\r\n      </P>\r\n      <H2>Modifying code to match computer vision program</H2>\r\n      <P>My initial program flow was as follows:</P>\r\n      <Img {...props} image=\"Flow_diagram_2.PNG\" />\r\n      <P>\r\n        In short, it is to send the command to the Arduino Uno every time it\r\n        analysed the gesture. However, the command is therefore sent too\r\n        frequently, and the Bluetooth port cannot handle such a large amount of\r\n        data transmission – some of the commands were then just dismissed by the\r\n        Uno and my hand wasn’t responding.\r\n      </P>\r\n      <P>\r\n        Hence, I updated the program to only send string every 0.2s as follows:\r\n      </P>\r\n      <Img {...props} image=\"Flow_diagram_3.PNG\" />\r\n      <P>\r\n        However, the command was still too frequent, yet I cannot further reduce\r\n        the rate it sends the string. While the improvement is insignificant,\r\n        the hand would be responding way too slowly.\r\n      </P>\r\n      <P>\r\n        Therefore, I decided to apply algorithms to filter and reduce strings\r\n        sent to the Arduino as follows:\r\n      </P>\r\n      <Img {...props} image=\"Flow_diagram_4.PNG\" />\r\n      <P>\r\n        The first algorithm is to simply check whether the current hand gesture\r\n        is the same as the one 0.2s ago. If same, then it’s redundant to send\r\n        the same command again. This reduced the command sent drastically, yet\r\n        the hand gestures were still sometimes wrong.\r\n      </P>\r\n      <P>\r\n        For instance, when closing the hand, it is possible the loop captured\r\n        the following moment:\r\n      </P>\r\n      <Img {...props} image=\"Hand.jpg\" />\r\n      <P>\r\n        Then, the robot hand would do this unwanted intermediate gesture. To\r\n        avoid this, the algorithm has to check whether the gesture is a final\r\n        one or not. The algorithm, therefore, has to neglect this:\r\n      </P>\r\n      <Img {...props} image=\"Hand_1.jpeg\" />\r\n      <P>But detect this and send the ‘00000’ command:</P>\r\n      <Img {...props} image=\"Hand_2.jpeg\" />\r\n      <P>\r\n        This means, that the algorithm has to check the condition below to\r\n        approve command sending:\r\n      </P>\r\n      <Img {...props} image=\"Algorithm.PNG\" />\r\n      <P>\r\n        The final program (Finger_counter_with_servo.py) is working smoothly.\r\n      </P>\r\n      <H1>Finalization</H1>\r\n      <H2>Perfboard circuit</H2>\r\n      <P>\r\n        I bought a 70×90 mm perfboard and soldered the electronics component on\r\n        it. The circuit design is as follows:\r\n      </P>\r\n      <Img {...props} image=\"Perfboard_circuit.PNG\" />\r\n      <P>\r\n        The blue pins are for the Arduino, the green pins are for the USB-C\r\n        breakout boards, the purple pins are for the HC-05 Bluetooth module, and\r\n        the white, red and black pins are for the servo motors.\r\n      </P>\r\n      <P>The soldered perfboard is as follows:</P>\r\n      <Img {...props} image=\"Perfboard.jpg\" />\r\n      <H2>Final assembly and testing</H2>\r\n      <P>The final assembled robot is as follows:</P>\r\n      <Img {...props} image=\"Assembly.jpg\" />\r\n      <P>The internal structure is as follows:</P>\r\n      <Youtube id=\"DNap2p14p6c\" />\r\n      <Img {...props} image=\"Base.jpg\" />\r\n      <P>The following video demonstrates the robot in-action:</P>\r\n      <Youtube id=\"7noIbWIoXuM\" />\r\n      <H1>Future improvements</H1>\r\n      <UL>\r\n        <li>\r\n          The delay between the real and robot hand movement could be shortened\r\n        </li>\r\n        <li>An external button could be made for the 9V battery</li>\r\n        <li>1 instead of 3 wires could be used for the power supply</li>\r\n      </UL>\r\n      <H1>Files</H1>\r\n      <Href>https://github.com/Do-it-myself/Robotic-Infinity-Gauntlet</Href>\r\n    </PostTemp>\r\n  );\r\n}\r\n","var map = {\n\t\"./posts/Barcode_Scanner_with_Computer_Vision/Page\": 784,\n\t\"./posts/Barcode_Scanner_with_Computer_Vision/Page.js\": 784,\n\t\"./posts/Barcode_Scanner_with_Computer_Vision/main.jpg\": 6814,\n\t\"./posts/Element\": 477,\n\t\"./posts/Element.js\": 477,\n\t\"./posts/Hangman_with_Python/Page\": 6247,\n\t\"./posts/Hangman_with_Python/Page.js\": 6247,\n\t\"./posts/Hangman_with_Python/main.jpg\": 462,\n\t\"./posts/KwickLine_Queue_Barrier/Page\": 3271,\n\t\"./posts/KwickLine_Queue_Barrier/Page.js\": 3271,\n\t\"./posts/KwickLine_Queue_Barrier/main.jpg\": 6131,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Aesthetic_halfway.PNG\": 7220,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Aesthetic_problem.PNG\": 9601,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Aesthetic_solution.PNG\": 5108,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/C-tube.jpeg\": 3050,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/CAD_render.PNG\": 7673,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Cafe_barrier.PNG\": 7776,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Customizable.PNG\": 9062,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Easy_banner_replacement.gif\": 1214,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Easy_banner_replacement_sketch.PNG\": 9952,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Easy_connection.PNG\": 7612,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Easy_connection.gif\": 4746,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Lock.gif\": 4595,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/No_queue_jump.PNG\": 1878,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Post_and_rope_barrier.PNG\": 2594,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Prototype.jpeg\": 2085,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Retractable_belt_barrier.PNG\": 3526,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Rough_Dimensions.PNG\": 7244,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Stability.PNG\": 4756,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Using_KwickLine.PNG\": 8431,\n\t\"./posts/KwickLine_Queue_Barrier/pictures/Variable_length.gif\": 6341,\n\t\"./posts/Light_Sensor_Firmware/Page\": 2220,\n\t\"./posts/Light_Sensor_Firmware/Page.js\": 2220,\n\t\"./posts/Light_Sensor_Firmware/main.jpg\": 9953,\n\t\"./posts/Light_Sensor_Firmware/pictures/Debug.jpg\": 6942,\n\t\"./posts/Light_Sensor_Firmware/pictures/OLED.jpg\": 1606,\n\t\"./posts/Light_Sensor_Firmware/pictures/Serial.jpg\": 9051,\n\t\"./posts/OpenFitness/Page\": 1883,\n\t\"./posts/OpenFitness/Page.js\": 1883,\n\t\"./posts/OpenFitness/main.jpg\": 3655,\n\t\"./posts/OpenFitness/pictures/Business_model.PNG\": 6884,\n\t\"./posts/OpenFitness/pictures/Compare.PNG\": 5681,\n\t\"./posts/OpenFitness/pictures/OpenFitness.jpg\": 1618,\n\t\"./posts/OpenFitness/pictures/Problem_1.PNG\": 1390,\n\t\"./posts/OpenFitness/pictures/Problem_2.PNG\": 6248,\n\t\"./posts/OpenFitness/pictures/Technologies.PNG\": 2047,\n\t\"./posts/PCB_Keyboard_and_Mouse/Page\": 466,\n\t\"./posts/PCB_Keyboard_and_Mouse/Page.js\": 466,\n\t\"./posts/PCB_Keyboard_and_Mouse/main.jpg\": 8689,\n\t\"./posts/PCB_Keyboard_and_Mouse/pictures/3D_render.png\": 4313,\n\t\"./posts/PCB_Keyboard_and_Mouse/pictures/Final.jpg\": 5054,\n\t\"./posts/PCB_Keyboard_and_Mouse/pictures/PCB.jpg\": 2709,\n\t\"./posts/PCB_Keyboard_and_Mouse/pictures/PCB_layout.PNG\": 365,\n\t\"./posts/PCB_Keyboard_and_Mouse/pictures/Prototype.jpg\": 1568,\n\t\"./posts/PCB_Keyboard_and_Mouse/pictures/Rows_and_columns.PNG\": 1672,\n\t\"./posts/PCB_Keyboard_and_Mouse/pictures/Schematic.PNG\": 3738,\n\t\"./posts/Posts\": 1449,\n\t\"./posts/Posts.json\": 1449,\n\t\"./posts/Robotic_Infinity_Gauntlet/Page\": 1399,\n\t\"./posts/Robotic_Infinity_Gauntlet/Page.js\": 1399,\n\t\"./posts/Robotic_Infinity_Gauntlet/main.jpg\": 6508,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Algorithm.PNG\": 3240,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Assembly.jpg\": 163,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Base.jpg\": 1551,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Finger_movement.gif\": 2058,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Flow_diagram_1.PNG\": 1332,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Flow_diagram_2.PNG\": 3716,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Flow_diagram_3.PNG\": 6201,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Flow_diagram_4.PNG\": 394,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Hand.jpg\": 8090,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Hand_1.jpeg\": 7329,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Hand_2.jpeg\": 11,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Perfboard.jpg\": 8562,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Perfboard_circuit.PNG\": 2587,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Rough_sketch.PNG\": 2687,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Whole_Assembly.PNG\": 5384,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Whole_Assembly_Internal.PNG\": 5868,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Wired.jpg\": 8521,\n\t\"./posts/Robotic_Infinity_Gauntlet/pictures/Wireless.jpg\": 1197\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 8163;","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}"],"names":["Page","props","PostTemp","P","H1","Youtube","id","Href","postJSON","require","content","homeIsNarrow","next","children","isSmall","useMediaQuery","query","className","src","alt","ListItem","H2","embed","href","target","rel","Img","image","width","style","OL","UL","Table","border","postWidth","Math","min","window","innerWidth","imageWidth","round","padding","imageHeight","allowFullScreen","allow","title","toString","height","fontSize","textAlign","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","_typeof","obj","Symbol","iterator","constructor","prototype","_toPropertyKey","arg","key","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_defineProperty","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}